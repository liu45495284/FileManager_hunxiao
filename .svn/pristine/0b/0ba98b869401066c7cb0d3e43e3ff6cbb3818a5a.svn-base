package com.freeme.apk.view;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.CompoundButton;

import com.freeme.apk.updateself.R;


public class SlidingSwitch extends CompoundButton {
    public static interface OnCheckedChangedListener {

        public abstract void onCheckedChanged(boolean isChecked);
    }

    private class SlidingHandler extends Handler {

        public void handleMessage(Message message) {
            switch (message.what) {
            default:
                return;

            case MSG_ANIMATE:
                doAnimation();
                return;

            case MSG_TOGGLING_ANIMATE:
                doTogglingAnimation(message.arg1);
                break;
            }
        }

    }

    private static final int ANIMATION_FRAME_DURATION = 16;
    private static final int ANIMATION_TOGGLINE_FRAMES = 20;
    private static final float MAXIMUM_MINOR_VELOCITY = 150F;
    private static final int MSG_ANIMATE = 1000;
    private static final int MSG_TOGGLING_ANIMATE = 1001;
    private static final int TAP_THRESHOLD = 6;
    private boolean bDoAlphaAnimation;
    private BitmapDrawable mActiveSlider;
    private int mAlphaPixels[];
    private float mAnimatedVelocity;
    private boolean mAnimating;
    private long mAnimationLastTime;
    private float mAnimationPosition;
    private int mBarSlice[];
    private long mCurrentAnimationTime;
    private long mCurrentTogglingAnimationTime;
    private Drawable mFrame;
    private final Handler mHandler;
    private int mHeight;
    private int mLastX;
    private BitmapDrawable mOffDisable;
    private OnCheckedChangedListener mOnCheckedChangedListener;
    private BitmapDrawable mOnDisable;
    private int mOriginalTouchPointX;
    private BitmapDrawable mPressedSlider;
    private Drawable mSlideMask;
    private Bitmap mSlideOff;
    private Paint mSlideOffPaint;
    private Bitmap mSlideOn;
    private Paint mSlideOnPaint;
    private BitmapDrawable mSlider;
    private boolean mSliderMoved;
    private int mSliderOffset;
    private int mSliderPositionEnd;
    private int mSliderPositionStart;
    private int mSliderWidth;
    private int mTapThreshold;
    private boolean mTracking;
    private int mWidth;

    public SlidingSwitch(Context context) {
        this(context, null);
    }

    public SlidingSwitch(Context context, AttributeSet attributeset) {
        this(context, attributeset, 0);
    }

    public SlidingSwitch(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        bDoAlphaAnimation = false;
        mAnimating = false;
        mHandler = new SlidingHandler();
        mAnimatedVelocity = MAXIMUM_MINOR_VELOCITY;
        mOnCheckedChangedListener = null;
        initialize(context, attributeset, i);
    }

    private void animateOff() {
        performFling(-MAXIMUM_MINOR_VELOCITY);
        invalidate();
    }

    private void animateOn() {
        performFling(MAXIMUM_MINOR_VELOCITY);
        invalidate();
    }

    private void animateToggle() {
        if (isChecked()) {
            animateOff();
            return;
        } else {
            animateOn();
            return;
        }
    }

    private void cutEdge(int i, int j, int ai[]) {
        for (int k = -1 + i * j; k >= 0; k--)
            ai[k] = ai[k] & 0xffffff + (((ai[k] >>> 24) * (mAlphaPixels[k] >>> 24)) / 255 << 24);

    }

    private void doAnimation() {
        boolean flag = true;
        if (mAnimating) {
            incrementAnimation();
            moveSlider((int) mAnimationPosition);
            if (mSliderOffset <= mSliderPositionStart || mSliderOffset >= mSliderPositionEnd) {
                mHandler.removeMessages(MSG_ANIMATE);
                mAnimating = false;
                bDoAlphaAnimation = flag;
                if (mSliderOffset < mSliderPositionEnd)
                    flag = false;
                setChecked(flag);
                if (mOnCheckedChangedListener != null) {
                    mOnCheckedChangedListener.onCheckedChanged(isChecked());
                    return;
                }
            } else {
                mCurrentAnimationTime = ANIMATION_FRAME_DURATION + mCurrentAnimationTime;
                mHandler.sendMessageAtTime(mHandler.obtainMessage(MSG_ANIMATE), mCurrentAnimationTime);
                return;
            }
        }
    }

    private void doTogglingAnimation(int i) {
        if (mSlideOn == mSlideOff)
            return;
        mHandler.removeMessages(MSG_TOGGLING_ANIMATE);
        if (i == 0)
            mCurrentTogglingAnimationTime = SystemClock.uptimeMillis();
        if (i < ANIMATION_TOGGLINE_FRAMES) {
            int j = i + 1;
            int k = (j * 255) / ANIMATION_TOGGLINE_FRAMES;
            Message message;
            if (isChecked()) {
                mSlideOffPaint.setAlpha(255 - k);
                mSlideOnPaint.setAlpha(k);
            } else {
                mSlideOffPaint.setAlpha(k);
                mSlideOnPaint.setAlpha(255 - k);
            }
            mCurrentTogglingAnimationTime = ANIMATION_FRAME_DURATION + mCurrentTogglingAnimationTime;
            message = mHandler.obtainMessage(MSG_TOGGLING_ANIMATE, j, 0);
            mHandler.sendMessageAtTime(message, mCurrentTogglingAnimationTime);
            invalidate();
        }
        bDoAlphaAnimation = false;
    }

    private void drawSlidingBar(Canvas canvas) {
        int i = mSliderPositionEnd - mSliderOffset;
        if (mSlideOnPaint.getAlpha() != 0) {
            mSlideOn.getPixels(mBarSlice, 0, mWidth, i, 0, mWidth, mHeight);
            cutEdge(mWidth, mHeight, mBarSlice);
            canvas.drawBitmap(mBarSlice, 0, mWidth, 0, 0, mWidth, mHeight, true, mSlideOnPaint);
        }
        if (mSlideOffPaint.getAlpha() != 0) {
            mSlideOff.getPixels(mBarSlice, 0, mWidth, i, 0, mWidth, mHeight);
            cutEdge(mWidth, mHeight, mBarSlice);
            canvas.drawBitmap(mBarSlice, 0, mWidth, 0, 0, mWidth, mHeight, true, mSlideOffPaint);
        }
    }

    private void incrementAnimation() {
        long l = SystemClock.uptimeMillis();
        float f = (float) (l - mAnimationLastTime) / 1000F;
        mAnimationPosition = mAnimationPosition + f * mAnimatedVelocity;
        mAnimationLastTime = l;
    }

    private void initialize(Context context, AttributeSet attributeset, int i) {
        setDrawingCacheEnabled(false);
        mTapThreshold = (int) (0.5F + TAP_THRESHOLD * getResources().getDisplayMetrics().density);
        mFrame = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_frame);
        mSlider = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_slider);
        mPressedSlider = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_slider);
        mOnDisable = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_on_disable);
        mOffDisable = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_off_disable);
        mWidth = mFrame.getIntrinsicWidth();
        mHeight = mFrame.getIntrinsicHeight();
        mActiveSlider = mSlider;
        mSliderWidth = Math.min(mWidth, mSlider.getIntrinsicWidth());
        mSliderPositionStart = 0;
        mSliderPositionEnd = mWidth - mSliderWidth;
        mSliderOffset = mSliderPositionStart;
        mSlideOff = Bitmap.createScaledBitmap(
                ((BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_off)).getBitmap(), 2
                        * mWidth - mSliderWidth, mHeight, true);
        mSlideOn = Bitmap.createScaledBitmap(
                ((BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_on)).getBitmap(), 2 * mWidth
                        - mSliderWidth, mHeight, true);
        mSlideMask = (BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_mask);
        mFrame.setBounds(0, 0, mWidth, mHeight);
        mOnDisable.setBounds(0, 0, mWidth, mHeight);
        mOffDisable.setBounds(0, 0, mWidth, mHeight);
        mAlphaPixels = new int[mWidth * mHeight];
        Bitmap bitmap;
        Bitmap bitmap1;
        bitmap = ((BitmapDrawable) getResources().getDrawable(R.drawable.widget_sliding_btn_mask)).getBitmap();
        bitmap1 = Bitmap.createScaledBitmap(bitmap, mWidth, mHeight, false);
        bitmap1.getPixels(mAlphaPixels, 0, mWidth, 0, 0, mWidth, mHeight);
        if (bitmap1 != bitmap)
            bitmap1.recycle();
        mBarSlice = new int[mWidth * mHeight];
        mSlideOffPaint = new Paint();
        mSlideOnPaint = new Paint();
    }

    private void moveSlider(int positon) {

        this.mSliderOffset = this.mSliderOffset + positon;
        if (this.mSliderOffset < mSliderPositionStart) {
            this.mSliderOffset = mSliderPositionStart;
        } else if (mSliderOffset > mSliderPositionEnd) {
            this.mSliderOffset = mSliderPositionEnd;
        }
        invalidate();
    }

    private void performFling(float f) {
        mAnimating = true;
        mAnimationPosition = 0.0F;
        mAnimatedVelocity = f;
        long l = SystemClock.uptimeMillis();
        mAnimationLastTime = l;
        mCurrentAnimationTime = ANIMATION_FRAME_DURATION + l;
        mHandler.removeMessages(MSG_ANIMATE);
        mHandler.sendMessageAtTime(mHandler.obtainMessage(MSG_ANIMATE), mCurrentAnimationTime);
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (!isEnabled()) {
            if (isChecked()) {
                mOnDisable.draw(canvas);
                return;
            } else {
                mOffDisable.draw(canvas);
                return;
            }
        } else {

            mSlideOnPaint.setAlpha(isChecked() ? 0xff : 0x0);
            mSlideOffPaint.setAlpha(!isChecked() ? 0xff : 0x0);

            drawSlidingBar(canvas);
            mFrame.draw(canvas);
            mSlideMask.draw(canvas);
            mActiveSlider.setBounds(mSliderOffset, 0, mSliderWidth + mSliderOffset, mHeight);
            mActiveSlider.draw(canvas);
            return;
        }
    }

    protected void onMeasure(int i, int j) {
        setMeasuredDimension(mWidth, mHeight);
    }

    public boolean onTouchEvent(MotionEvent event) {
        if (!isEnabled())
            return false;

        int x = (int) event.getX();
        int y = (int) event.getY();
        Rect rect = new Rect(mSliderOffset, 0, mSliderOffset + mSliderWidth, mHeight);
        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:

            if (rect.contains(x, y)) {
                mTracking = true;
                mActiveSlider = mPressedSlider;
                invalidate();
            } else {
                mTracking = false;
            }
            mLastX = x;
            mOriginalTouchPointX = x;
            mSliderMoved = false;
            break;
        case MotionEvent.ACTION_MOVE:
            if (mTracking) {
                moveSlider(x - mLastX);
                mLastX = x;
                if (Math.abs(x - mOriginalTouchPointX) >= mTapThreshold) {
                    mSliderMoved = true;
                    getParent().requestDisallowInterceptTouchEvent(true);
                }
            }
            break;
        case MotionEvent.ACTION_UP:
            if (mTracking) {
                if (!mSliderMoved)
                    animateToggle();
                else if (mSliderOffset >= mSliderPositionStart && mSliderOffset <= mSliderPositionEnd / 2)
                    animateOff();
                else
                    animateOn();
            } else {
                animateToggle();
            }
            mTracking = false;
            mSliderMoved = false;
            break;
        case MotionEvent.ACTION_CANCEL:
            mTracking = false;
            mSliderMoved = false;

            break;
        }

        return true;

    }

    public void setChecked(boolean checked) {
        boolean oldState = isChecked();
        super.setChecked(checked);
        mActiveSlider = mSlider;

        if (checked)
            mSliderOffset = mSliderPositionEnd;
        else
            mSliderOffset = mSliderPositionStart;

        if (oldState != checked) {
            if (bDoAlphaAnimation) {
                doTogglingAnimation(0x0);
                return;
            }
            mSlideOnPaint.setAlpha(checked ? 0xff : 0x0);
            mSlideOffPaint.setAlpha(!checked ? 0xff : 0x0);
            invalidate();
        }
    }

    public void setOnCheckedChangedListener(OnCheckedChangedListener oncheckedchangedlistener) {
        mOnCheckedChangedListener = oncheckedchangedlistener;
    }

}
